Class HierarchialDecomposition
Global Variables:
    G = (V, E, u) \\ an undirected capacitated graph
    b \\ demand

Method HierarchialDecomposition(C):
    Input: a cluster S \subset V
    Output: a hierarchial tree decomposition T 
    1.  T <- Init(T, 0) \\ initialize a tree with a root node that points to all 
    2.  If |C| == 1 do:
    3.  |   Return T \\ return the tree if C consists of one vertex
    4.  Endif
    5.  S <- GetSubclusters(S) \\ A list of subclusters
    6.  For C in S do:
    7.  |   T.AddChildren(HierarchialDecomposition(C))
    8.  Endfor
    Return T

\\ Question: how to represent each vertex in T? (maybe use a mask vector for V to indicate the vertices in the cluster)

Method GetSubclusters(S):
    Input: a cluster S \subset V
    Output: a list of subclusters S_1, ..., S_n \subset S that partitions S 
    1.  G_S <- Induced subgraph G[S]
    2.  B <- E(S, V - S)
    3.  Z <- PartitionA(S) \\ a list of subclusters generated by PartitionA
    4.  L, R <- PartitionB(S, B, Z) \\ two subclusters generated by PartitionB
    5.  \tilde S <- Combine(Z, L, R) \\ taking the intersection of Z and L, R
    Return: \tilde S


Theorem 3.1 Implementation

Method PartitionA(S): 
    Input: a cluster S \subset V
    Output: a list of subclusters Z_1, ..., Z_z
    1.  Use Lemma 3.1, Lemma 3.2 recursively to obtain a flow 

Method 


Method PartitionB(S, B, Z):